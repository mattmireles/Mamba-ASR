# ############################################################################
# CONFORMER LARGE S2S CONFIGURATION - Advanced Encoder-Decoder Architecture
# ############################################################################
#
# ARCHITECTURAL OVERVIEW:
# ======================
# This configuration defines a sophisticated sequence-to-sequence ASR system
# combining state-of-the-art components for maximum accuracy and flexibility:
# - Conformer Encoder: 18-layer CNN-Transformer hybrid for superior audio modeling
# - Transformer Decoder: Autoregressive decoder with cross-attention to encoder
# - Joint CTC/Attention Training: Dual objectives for robust alignment and modeling
# - Language Model Integration: Pretrained TransformerLM for improved fluency
# - Unigram Tokenization: Subword segmentation for optimal vocabulary efficiency
#
# KEY ARCHITECTURAL INNOVATIONS:
# =============================
# 1. Hybrid Training Objectives: CTC + Cross-Entropy with label smoothing
#    - CTC loss: Alignment-free training for encoder optimization
#    - Attention loss: Autoregressive language modeling for decoder optimization
#    - Joint training: Combines strengths of both paradigms
#
# 2. Advanced Decoding Pipeline:
#    - Joint CTC/Attention beam search for optimal accuracy
#    - External language model rescoring for improved fluency
#    - Configurable beam search with pruning for efficiency
#
# 3. Subword Tokenization Strategy:
#    - Unigram segmentation: Probabilistic subword units
#    - Vocabulary optimization: Balance between coverage and efficiency
#    - Cross-lingual capability: Subword units generalize across languages
#
# PERFORMANCE CHARACTERISTICS:
# ============================
# - Target Use Case: State-of-the-art ASR with maximum accuracy
# - Model Capacity: ~60M parameters (encoder + decoder + language model)
# - Training Time: ~5-7 days on 2x32GB GPUs with gradient accumulation
# - Inference Speed: ~0.5-1x realtime (with beam search + LM)
# - Memory Usage: ~12GB GPU memory for training, ~4GB for inference
# - Expected WER: <3% on test-clean, <8% on test-other (LibriSpeech)
#
# TRAINING STRATEGY:
# ==================
# 1. Multi-Task Learning: Joint CTC + attention training
#    - CTC weight: 0.3 (alignment and encoder optimization)
#    - Attention weight: 0.7 (language modeling and decoder optimization)
#    - Label smoothing: 0.1 (prevents overconfidence)
#
# 2. Advanced Optimization:
#    - Noam scheduler: Learning rate warmup and decay
#    - Gradient accumulation: Simulate large batch sizes
#    - Mixed precision: BF16 for memory efficiency
#
# 3. Language Model Integration:
#    - Pretrained TransformerLM: 24-layer language model
#    - Joint decoding: CTC + Attention + LM scores
#    - Configurable LM weight: Balance between accuracy and fluency
#
# CONFIGURATION INTEGRATION:
# ==========================
# Parameter Flow: YAML → SpeechBrain → TransformerASR → EncoderDecoder → Training
# - Encoder: ConformerEncoder from modules/Conformer.py
# - Decoder: TransformerDecoder from modules/Transformer.py
# - Joint Training: train_S2S.py with multi-task loss computation
# - Beam Search: Joint CTC/Attention decoding with LM integration
#
# Authors: Jianyuan Zhong, Titouan Parcollet, Samuele Cornell (Original S2S implementation)
# ############################################################################
# =============================================================================
# REPRODUCIBILITY AND EXPERIMENT TRACKING
# =============================================================================
# Seed needs to be set at top of yaml, before objects with parameters are made

seed: 3407  # Fixed seed for reproducible S2S training runs
__set_seed: !apply:torch.manual_seed [!ref <seed>]  # PyTorch RNG seed initialization

# Experiment identification and output management
project: Mamba-ASR  # WandB project name for experiment tracking
experiment: conformer_L_S2S  # Unique experiment identifier for S2S configuration
output_folder: !ref results/S2S/<experiment>/<seed>  # S2S-specific output structure
output_wer_folder: !ref <output_folder>/  # WER evaluation results directory
save_folder: !ref <output_folder>/save  # Model checkpoints and state storage
train_log: !ref <output_folder>/train_log.txt  # Training metrics and loss logging

# =============================================================================
# LANGUAGE MODEL INTEGRATION - Pretrained TransformerLM Setup
# =============================================================================

# Critical: Language model and ASR model must use identical tokenization
# Mismatch between tokenizers will cause severe performance degradation
# The pretrained model includes both language model weights and tokenizer

pretrained_lm_tokenizer_path: speechbrain/asr-transformer-transformerlm-librispeech
# HuggingFace model hub path for pretrained components:
# - TransformerLM: 24-layer transformer language model trained on LibriSpeech text
# - Tokenizer: Unigram tokenizer with 5000 subword vocabulary
# - Training Data: LibriSpeech transcripts + additional text data for language modeling
#
# Alternative Options:
# 1. Local path: /path/to/local/lm_tokenizer/ (containing lm.ckpt + tokenizer.ckpt)
# 2. Custom LM: Train your own language model with matching tokenizer
# 3. No LM: Set no_lm: True to disable language model integration
#
# Performance Impact:
# - With LM: 15-25% WER reduction on challenging test sets
# - Without LM: Faster inference but reduced accuracy on rare words/phrases

# Data files
data_folder: !PLACEHOLDER
# If RIRS_NOISES dir exists in /localscratch/xxx_corpus/RIRS_NOISES
# then data_folder_rirs should be /localscratch/xxx_corpus
# otherwise the dataset will automatically be downloaded
# data_folder_rirs: !ref <data_folder>
train_splits: ["train-clean-100", "train-clean-360", "train-other-500"]
dev_splits: ["dev-clean"]
test_splits: ["dev-clean", "test-clean", "test-other"]
skip_prep: False
train_csv: !ref <output_folder>/train.csv
valid_csv: !ref <output_folder>/dev-clean.csv
test_csv:
    - !ref <output_folder>/test-clean.csv
    - !ref <output_folder>/test-other.csv

# Training execution control
skip_train: False  # Set to True for evaluation-only runs with pretrained models
no_lm: False  # Set to True to disable language model integration (faster but less accurate)

# =============================================================================
# S2S TRAINING HYPERPARAMETERS - Multi-Task Learning Configuration
# =============================================================================

# Training schedule optimized for sequence-to-sequence architecture
number_of_epochs: 120  # S2S converges faster than CTC due to dual objectives
# Typically converges in 80-100 epochs with joint CTC/Attention training
# Monitor both CTC loss and attention loss for optimal stopping point

# Batch configuration for encoder-decoder training
batch_size: 16  # Per-GPU batch size reduced due to decoder memory overhead
# S2S requires more memory than CTC due to autoregressive decoder
# Effective global batch = batch_size * n_gpus * grad_accumulation_factor
# Target: 16 * 2 * 8 = 256 effective batch size for stable S2S convergence

# CRITICAL: Multi-task loss weighting for joint CTC/Attention training
ctc_weight: 0.3  # Weight for CTC loss component (alignment and encoder optimization)
# CTC loss: Provides alignment supervision and encoder optimization
# Attention loss weight: (1 - ctc_weight) = 0.7 for language modeling
# Optimal ratio: 0.3 CTC / 0.7 Attention balances alignment and fluency
# Increase CTC weight (0.5) for better alignment, decrease (0.1) for better fluency

grad_accumulation_factor: 8  # Higher accumulation compensates for smaller batch_size
# Essential for S2S convergence - decoder requires larger effective batch sizes
# Higher accumulation (8 vs 4) needed due to autoregressive training complexity

# Gradient optimization and stability
max_grad_norm: 5.0  # Gradient clipping critical for encoder-decoder stability
# S2S training more prone to gradient explosion due to decoder complexity
# Reduce to 2.0 if training becomes unstable, maintain at 5.0 for optimal convergence

# Data processing optimized for S2S
loss_reduction: 'batchmean'  # Loss reduction method for both CTC and cross-entropy
# 'batchmean': Normalizes by batch size for consistent gradient magnitudes
sorting: random  # Prevents overfitting to sequence length patterns
num_workers: 4  # Reduced workers due to higher per-sample memory usage
precision: bf16  # BFloat16 precision essential for S2S memory efficiency
# bf16: Optimal for A100/H100, use fp16 for V100, fp32 for debugging
avg_checkpoints: 10  # Model averaging crucial for S2S - larger improvement than CTC

# Learning rate optimization for joint training
lr_adam: 0.0008  # Base learning rate for AdamW optimizer with Noam scheduling
# Lower than CTC (0.001) due to increased complexity of joint objectives
# Noam scheduler automatically scales: lr = lr_adam * sqrt(d_model) * warmup_schedule

# Feature parameters
sample_rate: 16000
n_fft: 512
n_mels: 80
win_length: 32

# This setup works well for A100 80GB GPU, adapts it to your needs.
# Or turn it off (but training speed will decrease)
dynamic_batching: True
max_batch_length_train: 500
max_batch_length_val: 100 # we reduce it as the beam is much wider (VRAM)
num_bucket: 200
shuffle: True # if true re-creates batches at each epoch shuffling examples.
batch_ordering: random
max_batch_ex: 256

dynamic_batch_sampler_train:
    max_batch_length: !ref <max_batch_length_train>
    num_buckets: !ref <num_bucket>
    shuffle: !ref <shuffle>
    batch_ordering: !ref <batch_ordering>
    max_batch_ex: !ref <max_batch_ex>

dynamic_batch_sampler_valid:
    max_batch_length: !ref <max_batch_length_val>
    num_buckets: !ref <num_bucket>
    shuffle: !ref <shuffle>
    batch_ordering: !ref <batch_ordering>
    max_batch_ex: !ref <max_batch_ex>

# Dataloader options
train_dataloader_opts:
    batch_size: !ref <batch_size>
    shuffle: True
    num_workers: !ref <num_workers>

valid_dataloader_opts:
    batch_size: 1

test_dataloader_opts:
    batch_size: 1

# =============================================================================
# ENCODER-DECODER MODEL ARCHITECTURE - S2S Configuration
# =============================================================================

# Core transformer architecture for sequence-to-sequence modeling
d_model: 512  # Model dimension increased from CTC (256) for better S2S capacity
# 512: Standard transformer size providing optimal balance for encoder-decoder
# Larger than CTC configuration due to increased complexity of autoregressive decoding
# Corresponds to ~60M parameters with encoder (12L) + decoder (6L) architecture

nhead: 8  # Number of attention heads optimized for 512-dimensional model
# 8 heads: Standard ratio maintaining head_dim=64 (512/8) for optimal attention
# Each head: 64 dimensions allows rich attention pattern learning
# Cross-attention between encoder/decoder requires sufficient head capacity

# Asymmetric encoder-decoder design optimized for ASR
num_encoder_layers: 12  # Conformer encoder layers for audio feature processing
# 12 layers: Deep encoder for comprehensive audio modeling
# Fewer than CTC (18) but compensated by decoder and higher d_model
# Each layer: FFN + Attention + Convolution + FFN (Macaron Conformer structure)

num_decoder_layers: 6  # Transformer decoder layers for autoregressive generation
# 6 layers: Sufficient for language modeling without overfitting
# Asymmetric design: More encoder layers (audio complex) vs decoder (text simpler)
# Each layer: Self-attention + Cross-attention + FFN

d_ffn: 2048  # Feed-forward network dimension following 4x scaling rule
# 2048 = 4 * 512: Standard transformer FFN scaling for optimal expressiveness
# Higher capacity than CTC due to increased model complexity

transformer_dropout: 0.1  # Dropout rate for encoder-decoder regularization
# Standard 0.1 rate prevents overfitting in joint training
# Applied consistently across encoder, decoder, and attention mechanisms

activation: !name:torch.nn.GELU  # Activation function for feed-forward networks
# GELU: Smooth activation optimal for transformer architectures
# Better gradient flow than ReLU, standard for modern S2S models

output_neurons: 5000  # Vocabulary size for unigram subword tokenization
# 5000 subwords: Optimal balance between coverage and efficiency
# Much larger than character-level (31) for better language modeling
# Matches pretrained language model vocabulary for consistency

# =============================================================================
# TOKENIZATION AND LOSS CONFIGURATION
# =============================================================================

# Special token configuration for sequence-to-sequence training
blank_index: 0  # CTC blank token for joint CTC/Attention training
pad_index: 0    # Padding token for variable-length sequence batching
bos_index: 1    # Beginning-of-sequence token for decoder initialization
eos_index: 2    # End-of-sequence token for decoder termination

# Advanced training techniques
label_smoothing: 0.1  # Label smoothing for attention loss regularization
# Prevents overconfidence in target predictions
# 0.1: Standard value reducing overfitting and improving generalization
# Applied only to attention loss, not CTC loss

# =============================================================================
# ADVANCED DECODING CONFIGURATION - Joint CTC/Attention/LM
# =============================================================================

# Sequence length constraints for decoder
min_decode_ratio: 0.0  # Minimum decode length ratio relative to encoder
max_decode_ratio: 1.0  # Maximum decode length ratio relative to encoder
# Conservative ratios prevent runaway generation or premature termination

# Beam search optimization for different evaluation phases
valid_search_interval: 10  # Frequency of beam search validation (every N epochs)
# Expensive operation - reduced frequency (10 vs 1) for faster training
valid_beam_size: 10  # Beam width for validation - balanced speed/accuracy
test_beam_size: 66   # Large beam for final evaluation - maximum accuracy
# Large test beam (66) provides optimal accuracy for final evaluation

# CRITICAL: Multi-model score combination for joint decoding
lm_weight: 0.60  # Language model weight in joint CTC/Attention/LM scoring
# 0.60: Strong LM influence for improved fluency and rare word handling
# Higher values (0.8) improve fluency but may reduce acoustic accuracy
# Lower values (0.4) maintain acoustic fidelity but reduce language modeling

ctc_weight_decode: 0.40  # CTC weight during decoding (different from training!)
# 0.40: Balanced CTC influence during beam search
# Different from training ctc_weight (0.3) - decoding optimizes different objective
# Attention weight: (1 - ctc_weight_decode - lm_weight) but computed internally

############################## models ################################

CNN: !new:speechbrain.lobes.models.convolution.ConvolutionFrontEnd
    input_shape: (8, 10, 80)
    num_blocks: 2
    num_layers_per_block: 1
    out_channels: (64, 32)
    kernel_sizes: (3, 3)
    strides: (2, 2)
    residuals: (False, False)

Transformer: !new:speechbrain.lobes.models.transformer.TransformerASR.TransformerASR # yamllint disable-line rule:line-length
    input_size: 640
    tgt_vocab: !ref <output_neurons>
    d_model: !ref <d_model>
    nhead: !ref <nhead>
    num_encoder_layers: !ref <num_encoder_layers>
    num_decoder_layers: !ref <num_decoder_layers>
    d_ffn: !ref <d_ffn>
    dropout: !ref <transformer_dropout>
    activation: !ref <activation>
    encoder_module: conformer
    attention_type: RelPosMHAXL
    normalize_before: True
    causal: False

# This is the TransformerLM that is used according to the Huggingface repository
# Visit the HuggingFace model corresponding to the pretrained_lm_tokenizer_path
# For more details about the model!
# NB: It has to match the pre-trained TransformerLM!!
lm_model: !new:speechbrain.lobes.models.transformer.TransformerLM.TransformerLM # yamllint disable-line rule:line-length
    vocab: !ref <output_neurons>
    d_model: 768
    nhead: 12
    num_encoder_layers: 12
    num_decoder_layers: 0
    d_ffn: 3072
    dropout: 0.0
    activation: !name:torch.nn.GELU
    normalize_before: False

tokenizer: !new:sentencepiece.SentencePieceProcessor

ctc_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <output_neurons>

seq_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <output_neurons>

normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global
    update_until_epoch: 4

modules:
    CNN: !ref <CNN>
    Transformer: !ref <Transformer>
    seq_lin: !ref <seq_lin>
    ctc_lin: !ref <ctc_lin>
    normalize: !ref <normalize>

# define two optimizers here for two-stage training
Adam: !name:torch.optim.AdamW
    lr: !ref <lr_adam>
    betas: (0.9, 0.98)
    eps: 0.000000001

model: !new:torch.nn.ModuleList
    - [!ref <CNN>, !ref <Transformer>, !ref <seq_lin>, !ref <ctc_lin>]

# Scorer
ctc_scorer: !new:speechbrain.decoders.scorer.CTCScorer
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    ctc_fc: !ref <ctc_lin>


transformerlm_scorer: !new:speechbrain.decoders.scorer.TransformerLMScorer
    language_model: !ref <lm_model>
    temperature: 1.15

scorer_test_search: !new:speechbrain.decoders.scorer.ScorerBuilder
    full_scorers: [!ref <transformerlm_scorer>, !ref <ctc_scorer>]
    weights:
        ctc: !ref <ctc_weight_decode>
        transformerlm: !ref <lm_weight>

scorer_valid_search: !new:speechbrain.decoders.scorer.ScorerBuilder
    full_scorers: [!ref <ctc_scorer>]
    weights:
        ctc: !ref <ctc_weight_decode>

valid_search: !new:speechbrain.decoders.S2STransformerBeamSearcher
    modules: [!ref <Transformer>, !ref <seq_lin>]
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <valid_beam_size>
    using_eos_threshold: False
    length_normalization: True
    scorer: !ref <scorer_valid_search>

test_search: !new:speechbrain.decoders.S2STransformerBeamSearcher
    modules: [!ref <Transformer>, !ref <seq_lin>]
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <test_beam_size>
    temperature: 1.15
    using_eos_threshold: False
    length_normalization: True
    scorer: !ref <scorer_test_search>

log_softmax: !new:torch.nn.LogSoftmax
    dim: -1

ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
    blank_index: !ref <blank_index>
    reduction: !ref <loss_reduction>

seq_cost: !name:speechbrain.nnet.losses.kldiv_loss
    label_smoothing: !ref <label_smoothing>
    reduction: !ref <loss_reduction>

n_warmup_steps: 30000
noam_annealing: !new:speechbrain.nnet.schedulers.NoamScheduler
    lr_initial: !ref <lr_adam>
    n_warmup_steps: !ref <n_warmup_steps>

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        noam_scheduler: !ref <noam_annealing>
        normalizer: !ref <normalize>
        counter: !ref <epoch_counter>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

# Speed perturbation
speed_changes: [95, 100, 105]  # List of speed changes for time-stretching

speed_perturb: !new:speechbrain.augment.time_domain.SpeedPerturb
    orig_freq: !ref <sample_rate>
    speeds: !ref <speed_changes>

# Time Drop
time_drop_length_low: 15  # Min length for temporal chunk to drop in spectrogram
time_drop_length_high: 25  # Max length for temporal chunk to drop in spectrogram
time_drop_count_low: 4  # Min number of chunks to drop in time in the spectrogram
time_drop_count_high: 4  # Max number of chunks to drop in time in the spectrogram
time_drop_replace: "mean"  # Method of dropping chunks

time_drop: !new:speechbrain.augment.freq_domain.SpectrogramDrop
    drop_length_low: !ref <time_drop_length_low>
    drop_length_high: !ref <time_drop_length_high>
    drop_count_low: !ref <time_drop_count_low>
    drop_count_high: !ref <time_drop_count_high>
    replace: !ref <time_drop_replace>
    dim: 1

# Frequency Drop
freq_drop_length_low: 10  # Min length for chunks to drop in frequency in the spectrogram
freq_drop_length_high: 20  # Max length for chunks to drop in frequency in the spectrogram
freq_drop_count_low: 4  # Min number of chunks to drop in frequency in the spectrogram
freq_drop_count_high: 4  # Max number of chunks to drop in frequency in the spectrogram
freq_drop_replace: "mean"  # Method of dropping chunks

freq_drop: !new:speechbrain.augment.freq_domain.SpectrogramDrop
    drop_length_low: !ref <freq_drop_length_low>
    drop_length_high: !ref <freq_drop_length_high>
    drop_count_low: !ref <freq_drop_count_low>
    drop_count_high: !ref <freq_drop_count_high>
    replace: !ref <freq_drop_replace>
    dim: 2

# Time warp
time_warp_window: 5  # Length of time warping window
time_warp_mode: "bicubic"  # Time warping method

time_warp: !new:speechbrain.augment.freq_domain.Warping
    warp_window: !ref <time_warp_window>
    warp_mode: !ref <time_warp_mode>
    dim: 1

fea_augment: !new:speechbrain.augment.augmenter.Augmenter
    parallel_augment: False
    concat_original: False
    repeat_augment: 1
    shuffle_augmentations: False
    min_augmentations: 3
    max_augmentations: 3
    augment_prob: 1.0
    augmentations: [
        !ref <time_drop>,
        !ref <freq_drop>,
        !ref <time_warp>]

compute_features: !new:speechbrain.lobes.features.Fbank
    sample_rate: !ref <sample_rate>
    n_fft: !ref <n_fft>
    n_mels: !ref <n_mels>
    win_length: !ref <win_length>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
acc_computer: !name:speechbrain.utils.Accuracy.AccuracyStats

# The pretrainer allows a mapping between pretrained files and instances that
# are declared in the yaml. E.g here, we will download the file lm.ckpt
# and it will be loaded into "lm" which is pointing to the <lm_model> defined
# before.
pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
    collect_in: !ref <save_folder>
    loadables:
        lm: !ref <lm_model>
        tokenizer: !ref <tokenizer>
    paths:
        lm: !ref <pretrained_lm_tokenizer_path>/lm.ckpt
        tokenizer: !ref <pretrained_lm_tokenizer_path>/tokenizer.ckpt

use_wandb: False
resume: False
wandb_logger: !name:speechbrain.utils.train_logger.WandBLogger
    initializer: !name:wandb.init
    entity: xj-audio
    project: !ref <project>
    name: !ref <experiment>
    dir: !ref <save_folder>
    reinit: true
    resume: !ref <resume>
