# ############################################################################
# CONFORMER LARGE CTC CONFIGURATION - Mamba-ASR Production Setup
# ############################################################################
#
# ARCHITECTURAL OVERVIEW:
# ======================
# This configuration defines a large-scale Conformer encoder with CTC decoding
# for high-accuracy automatic speech recognition. The architecture combines:
# - Conformer Encoder: 18-layer CNN-Transformer hybrid for superior audio modeling
# - CTC Decoder: Connectionist Temporal Classification for alignment-free training
# - Character Tokenization: Direct character-level prediction without subword units
# - LibriSpeech Training: Full 960h dataset for maximum performance
#
# KEY DESIGN DECISIONS:
# ====================
# 1. Large Model Scale: 18 layers, 256 d_model optimized for accuracy over speed
# 2. CTC Architecture: Alignment-free training suitable for streaming applications
# 3. Character Tokens: Direct character prediction for maximum vocabulary coverage
# 4. RelPosMHAXL: Relative positional attention for better length generalization
# 5. Dynamic Batching: Memory-efficient training with variable sequence lengths
#
# PERFORMANCE CHARACTERISTICS:
# ============================
# - Target Use Case: High-accuracy offline ASR with competitive WER
# - Model Capacity: ~50M parameters for large-scale audio modeling
# - Training Time: ~3-5 days on 2x32GB GPUs with gradient accumulation
# - Inference Speed: Real-time capable on modern GPUs, ~2-3x realtime on CPU
# - Memory Usage: ~8GB GPU memory for training, ~2GB for inference
#
# CONFIGURATION INTEGRATION:
# ==========================
# This YAML file integrates with the Mamba-ASR codebase through:
# - modules/TransformerASR.py: Main model instantiation via TransformerASR class
# - modules/Conformer.py: ConformerEncoder creation with specified parameters
# - train_CTC.py: Training script that loads this configuration
# - SpeechBrain framework: Uses !new and !ref syntax for object instantiation
#
# Parameter Flow: YAML → SpeechBrain → TransformerASR → ConformerEncoder → Training
#
# Authors: Xilin Jiang (Original implementation)
# ############################################################################
# =============================================================================
# REPRODUCIBILITY AND EXPERIMENT TRACKING
# =============================================================================
# Seed needs to be set at top of yaml, before objects with parameters are made

seed: 3402  # Fixed seed for reproducible training runs across experiments
__set_seed: !apply:torch.manual_seed [!ref <seed>]  # PyTorch RNG seed initialization

# Experiment identification and output management
project: Mamba-ASR  # WandB project name for experiment tracking
experiment: conformer_L_CTC  # Unique experiment identifier for this configuration
output_folder: !ref results/CTC_char/<experiment>/<seed>  # Hierarchical output structure
save_folder: !ref <output_folder>/save  # Model checkpoints and state storage
train_log: !ref <output_folder>/train_log.txt  # Training metrics and loss logging


# =============================================================================
# DATASET CONFIGURATION - LibriSpeech 960h Full Training Setup
# =============================================================================

# Dataset path configuration - must be set by user before training
data_folder: !PLACEHOLDER  # Root directory containing LibriSpeech dataset
# REQUIRED: Set this to your LibriSpeech root directory before training
# Example: /path/to/LibriSpeech or /datasets/LibriSpeech

# Room Impulse Response and Noise augmentation (optional)
# If RIRS_NOISES dir exists in /localscratch/xxx_corpus/RIRS_NOISES
# then data_folder_rirs should be /localscratch/xxx_corpus
# otherwise the dataset will automatically be downloaded
# data_folder_rirs: !ref <data_folder>

# LibriSpeech split configuration for maximum training data
train_splits: ["train-clean-100", "train-clean-360", "train-other-500"]
# Total: 960 hours of training audio
# - train-clean-100: 100h clean speech, high recording quality
# - train-clean-360: 360h clean speech, good recording quality  
# - train-other-500: 500h other speech, includes noisy/accented data

dev_splits: ["dev-clean"]  # Development set for validation (5.4h clean speech)
test_splits: ["dev-clean", "test-clean", "test-other"]  # Evaluation sets
# - dev-clean: 5.4h development set for hyperparameter tuning
# - test-clean: 5.4h test set, high quality recordings  
# - test-other: 5.1h test set, challenging acoustic conditions

# Data preprocessing control
skip_prep: False  # Set to True to skip CSV generation if already prepared
# CSV file generation paths - created by librispeech_prepare.py
train_csv: !ref <output_folder>/train.csv  # Training manifest with audio paths and transcripts
valid_csv: !ref <output_folder>/dev-clean.csv  # Validation manifest
test_csv:
    - !ref <output_folder>/test-clean.csv  # Clean test conditions
    - !ref <output_folder>/test-other.csv  # Challenging test conditions

# Training execution control
skip_train: False  # Set to True for evaluation-only runs with pre-trained models
precision: bf16  # BFloat16 mixed precision for memory efficiency and speed
# bf16: Better numerical stability than fp16, supported on A100/H100 GPUs
# Use fp16 for V100 or older GPUs, fp32 for debugging numerical issues

# =============================================================================
# TRAINING HYPERPARAMETERS - Optimized for Large-Scale ASR Training
# =============================================================================

# Training schedule and duration
number_of_epochs: 500  # Maximum epochs - early stopping typically occurs around 100-200
# Large models benefit from longer training with Noam scheduler
# Monitor validation WER for convergence, typically 150-300 epochs needed

# Batch configuration for multi-GPU training
batch_size: 32  # Per-GPU batch size optimized for 2x32GB GPUs
# Effective global batch = batch_size * n_gpus * grad_accumulation_factor
# Target: 32 * 2 * 4 = 256 effective batch size for stable convergence
grad_accumulation_factor: 4  # Accumulate gradients to simulate larger batches
# Critical for transformer convergence - ensures sufficient gradient statistics

# Gradient optimization and stability
max_grad_norm: 5.0  # Gradient clipping prevents training instability
# Essential for deep transformer models to prevent gradient explosion
# Reduce to 1.0-2.0 if training becomes unstable, increase to 10.0 for faster convergence

# Data processing configuration
sorting: random  # Sequence length sorting strategy for training efficiency
# Options: 'random', 'ascending', 'descending'
# random: Best for model generalization, prevents length-based overfitting
num_workers: 16  # Parallel data loading workers for I/O efficiency
# Set to min(CPU_cores, 16) for optimal balance of speed vs. memory usage

# Loss computation and validation
loss_reduction: batchmean  # CTC loss reduction method across batch dimension
# 'batchmean': Normalizes loss by batch size for consistent gradients
valid_search_interval: 1  # Frequency of beam search validation (every N epochs)
# Beam search is expensive - increase to 5-10 for faster training
avg_checkpoints: 10  # Number of best checkpoints to average for final model
# Model averaging significantly improves final performance (1-2% WER reduction)

# Learning rate and regularization
lr_model: 0.001  # Base learning rate for Noam scheduler
# Scaled automatically by Noam scheduler: lr = lr_model * sqrt(d_model) * warmup_schedule
weight_decay: 0.0005  # L2 regularization strength for AdamW optimizer
# Prevents overfitting on large dataset - reduce to 0.0001 for smaller datasets

# =============================================================================
# AUDIO FEATURE EXTRACTION - Mel-scale Filterbank Configuration
# =============================================================================

# Audio preprocessing parameters aligned with LibriSpeech standard
sample_rate: 16000  # 16kHz sampling rate - LibriSpeech standard
# All LibriSpeech audio is resampled to 16kHz for consistency
# Sufficient bandwidth for speech (human speech: 80Hz-8kHz fundamental range)

n_fft: 512  # FFT window size for STFT computation
# 512 samples = 32ms window at 16kHz sample rate
# Good balance between time/frequency resolution for speech

n_mels: 80  # Number of mel-scale filterbank channels
# 80 mel filters standard for ASR - captures speech-relevant frequency structure
# More than 40 (minimum) but less than 128 (overkill) for computational efficiency

win_length: 25  # Window length in milliseconds for STFT
# 25ms windows = 400 samples at 16kHz
# Standard for speech recognition - captures phonemic information without over-smoothing

# Training parameters
# To make Transformers converge, the global bath size should be large enough.
# The global batch size is max_batch_len * n_gpus * gradient_accumulation.
# Empirically, we used 850 * 8 A40 45G GPUs * 2 or 1700 * 4 A100 80G * 2.
# Please, set your parameters accordingly.
dynamic_batching: True
max_batch_length_train: 850
max_batch_len_val: 100
num_bucket: 200
shuffle: False # if true re-creates batches at each epoch shuffling examples.
max_batch_ex: 128
batch_ordering: random

dynamic_batch_sampler_train:
    max_batch_length: !ref <max_batch_length_train>
    num_buckets: !ref <num_bucket>
    shuffle: !ref <shuffle>
    batch_ordering: !ref <batch_ordering>
    max_batch_ex: !ref <max_batch_ex>

dynamic_batch_sampler_val:
    max_batch_length: !ref <max_batch_len_val>
    num_buckets: !ref <num_bucket>
    shuffle: !ref <shuffle>
    batch_ordering: !ref <batch_ordering>
    max_batch_ex: !ref <max_batch_ex>

# Dataloader options
train_dataloader_opts:
    batch_size: !ref <batch_size>
    shuffle: True
    num_workers: !ref <num_workers>

valid_dataloader_opts:
    batch_size: 1

test_dataloader_opts:
    batch_size: 1

# =============================================================================
# CONFORMER MODEL ARCHITECTURE - Large-Scale Configuration
# =============================================================================

# Core transformer architecture parameters
attention_type: RelPosMHAXL  # Relative positional multi-head attention (TransformerXL-style)
# RelPosMHAXL provides better length generalization than absolute positional encoding
# Critical for streaming applications and variable-length sequences
# Alternative: regularMHA for faster training but worse extrapolation

d_model: 256  # Model dimension for all transformer layers
# 256: Large model size balancing capacity vs. computational cost
# Corresponds to ~50M parameters with 18 layers
# Smaller than typical (512) but compensated by increased depth (18 layers)

nhead: 4  # Number of attention heads in multi-head attention
# 4 heads for 256-dim model maintains head_dim=64 (optimal ratio)
# More heads (8) would reduce head dimension to 32 (less expressive)
# Fewer heads (2) would increase computation per head

d_ffn: 1024  # Feed-forward network hidden dimension
# 4x model dimension (1024 = 4 * 256) following transformer standard
# Controls model expressiveness and capacity
# Larger values increase parameters but may improve performance

num_encoder_layers: 18  # Number of Conformer encoder layers
# 18 layers: Large model optimized for accuracy over speed
# Deep architecture compensates for smaller d_model (256 vs typical 512)
# Each layer contains: FFN + Attention + Convolution + FFN (Macaron structure)

num_decoder_layers: 0  # CTC training uses no decoder layers
# CTC eliminates need for autoregressive decoder
# All decoding handled by CTC alignment algorithm
# Set to >0 only for attention-based sequence-to-sequence models

transformer_dropout: 0.1  # Dropout rate for regularization
# 0.1 standard for large models on LibriSpeech
# Prevents overfitting while maintaining gradient flow
# Increase to 0.2-0.3 for smaller datasets or signs of overfitting

activation: !name:torch.nn.GELU  # Activation function for feed-forward networks
# GELU: Smooth activation with better gradient properties than ReLU
# Standard choice for modern transformers
# Alternative: Swish/SiLU for similar performance

output_neurons: 31  # Vocabulary size for character-level tokenization
# 31 characters: 26 letters + space + apostrophe + 3 special tokens
# Includes: a-z, space, apostrophe, <blank>, <bos>, <eos>
# Character-level avoids subword complexity and OOV issues

# =============================================================================
# TOKENIZATION AND OUTPUT CONFIGURATION
# =============================================================================

token_type: char  # Tokenization strategy: ["unigram", "bpe", "char"]
# char: Direct character-level prediction without subword segmentation
# Advantages: No OOV issues, simple vocabulary, good for diverse languages
# Trade-offs: Longer sequences, potentially slower convergence than BPE

character_coverage: 1.0  # Coverage of character vocabulary (for SentencePiece)
# 1.0: Include all characters in dataset vocabulary
# Only relevant for subword tokenization (BPE/unigram)

# Special token indices for CTC training
blank_index: 0  # CTC blank token for alignment
# Index 0 reserved for CTC blank symbol (represents no output)
# Critical for CTC alignment algorithm
bos_index: 1    # Beginning-of-sequence token (index 1)
eos_index: 2    # End-of-sequence token (index 2)

# =============================================================================
# CTC BEAM SEARCH DECODING PARAMETERS
# =============================================================================

# Beam search configuration for evaluation
beam_size: 100  # Beam width for CTC beam search during evaluation
# Larger beam improves accuracy but increases computation
# 100: Good balance for final evaluation, use 10-20 for faster validation

beam_prune_logp: -12.0  # Log probability threshold for beam pruning
# Prunes beams with log probability below threshold
# More negative values (e.g., -15.0) keep more beams, less negative (e.g., -8.0) prune aggressively

token_prune_min_logp: -1.2  # Minimum log probability for token consideration
# Tokens below this threshold ignored during beam expansion
# Prevents consideration of very unlikely characters

prune_history: False  # Whether to prune beam search history
# False: Keep full search history for better accuracy
# True: Prune history to reduce memory usage

############################## models ################################

CNN: !new:speechbrain.lobes.models.convolution.ConvolutionFrontEnd
    input_shape: (8, 10, 80)
    num_blocks: 2
    num_layers_per_block: 1
    out_channels: (64, 32)
    kernel_sizes: (3, 3)
    strides: (2, 2)
    residuals: (False, False)

Transformer: !new:modules.TransformerASR.TransformerASR # yamllint disable-line rule:line-length
    input_size: 640
    tgt_vocab: !ref <output_neurons>
    d_model: !ref <d_model>
    nhead: !ref <nhead>
    num_encoder_layers: !ref <num_encoder_layers>
    num_decoder_layers: !ref <num_decoder_layers>
    d_ffn: !ref <d_ffn>
    dropout: !ref <transformer_dropout>
    activation: !ref <activation>
    encoder_module: conformer
    attention_type: !ref <attention_type>
    normalize_before: True
    causal: False

ctc_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <output_neurons>

normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global
    update_until_epoch: 4

modules:
    CNN: !ref <CNN>
    Transformer: !ref <Transformer>
    ctc_lin: !ref <ctc_lin>
    normalize: !ref <normalize>

model: !new:torch.nn.ModuleList
    - [!ref <CNN>, !ref <Transformer>, !ref <ctc_lin>]

####################### Decoding & optimiser ###########################

# Decoding parameters
test_beam_search:
    blank_index: !ref <blank_index>
    beam_size: !ref <beam_size>
    beam_prune_logp: !ref <beam_prune_logp>
    token_prune_min_logp: !ref <token_prune_min_logp>
    prune_history: !ref <prune_history>

ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
    blank_index: !ref <blank_index>
    reduction: !ref <loss_reduction>

n_warmup_steps: 7500
noam_annealing: !new:speechbrain.nnet.schedulers.NoamScheduler
    lr_initial: !ref <lr_model>
    n_warmup_steps: !ref <n_warmup_steps>

model_opt_class: !name:torch.optim.AdamW
    lr: !ref <lr_model>
    betas: (0.9, 0.98)
    eps: 0.000000001
    weight_decay: !ref <weight_decay>

log_softmax: !new:torch.nn.LogSoftmax
    dim: -1

############################## Augmentations ###################################

# Speed perturbation
speed_changes: [95, 100, 105]  # List of speed changes for time-stretching

speed_perturb: !new:speechbrain.augment.time_domain.SpeedPerturb
    orig_freq: !ref <sample_rate>
    speeds: !ref <speed_changes>

# Time Drop
# Roughly translated from 
# drop_chunk: !new:speechbrain.augment.time_domain.DropChunk
#     drop_length_low: 1000
#     drop_length_high: 2000
#     drop_count_low: 1
#     drop_count_high: 5
time_drop_length_low: 6  # Min length for temporal chunk to drop in spectrogram
time_drop_length_high: 12  # Max length for temporal chunk to drop in spectrogram
time_drop_count_low: 1  # Min number of chunks to drop in time in the spectrogram
time_drop_count_high: 5  # Max number of chunks to drop in time in the spectrogram
time_drop_replace: "mean"  # Method of dropping chunks

time_drop: !new:speechbrain.augment.freq_domain.SpectrogramDrop
    drop_length_low: !ref <time_drop_length_low>
    drop_length_high: !ref <time_drop_length_high>
    drop_count_low: !ref <time_drop_count_low>
    drop_count_high: !ref <time_drop_count_high>
    replace: !ref <time_drop_replace>
    dim: 1

# Frequency Drop
# Roughly translated from 
# drop_freq: !new:speechbrain.augment.time_domain.DropFreq
#     drop_freq_low: 0
#     drop_freq_high: 1
#     drop_freq_count_low: 1
#     drop_freq_count_high: 3
#     drop_freq_width: 0.05
freq_drop_length_low: 10  # Min length for chunks to drop in frequency in the spectrogram
freq_drop_length_high: 20  # Max length for chunks to drop in frequency in the spectrogram
freq_drop_count_low: 1  # Min number of chunks to drop in frequency in the spectrogram
freq_drop_count_high: 3  # Max number of chunks to drop in frequency in the spectrogram
freq_drop_replace: "mean"  # Method of dropping chunks

freq_drop: !new:speechbrain.augment.freq_domain.SpectrogramDrop
    drop_length_low: !ref <freq_drop_length_low>
    drop_length_high: !ref <freq_drop_length_high>
    drop_count_low: !ref <freq_drop_count_low>
    drop_count_high: !ref <freq_drop_count_high>
    replace: !ref <freq_drop_replace>
    dim: 2

fea_augment: !new:speechbrain.augment.augmenter.Augmenter
    parallel_augment: False
    concat_original: False
    repeat_augment: 1
    shuffle_augmentations: False
    min_augmentations: 2
    max_augmentations: 2
    augment_prob: 1.0
    augmentations: [
        !ref <time_drop>,
        !ref <freq_drop>,
    ]

compute_features: !new:speechbrain.lobes.features.Fbank
    sample_rate: !ref <sample_rate>
    n_fft: !ref <n_fft>
    n_mels: !ref <n_mels>
    win_length: !ref <win_length>

############################## Logging and Pretrainer ##########################

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        noam_scheduler: !ref <noam_annealing>
        normalizer: !ref <normalize>
        counter: !ref <epoch_counter>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
    split_tokens: True
wer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats

use_wandb: False
resume: False
wandb_logger: !name:speechbrain.utils.train_logger.WandBLogger
    initializer: !name:wandb.init
    entity: xj-audio
    project: !ref <project>
    name: !ref <experiment>
    dir: !ref <save_folder>
    reinit: true
    resume: !ref <resume>


fixed_sec: null
